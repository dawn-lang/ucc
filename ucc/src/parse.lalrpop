// Copyright (c) 2021 Scott J Maddox
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

use crate::core::*;
use crate::interp::*;

grammar(interner: &mut Interner);

pub(crate) InterpCommand: InterpCommand = {
    <InterpItems> => InterpCommand::Eval(<>),
    COLON_TRACE <Expr> => InterpCommand::Trace(<>),
    COLON_SHOW <Symbol> => InterpCommand::Show(<>),
    COLON_LIST => InterpCommand::List,
    COLON_DROP => InterpCommand::Drop,
    COLON_CLEAR => InterpCommand::Clear,
    COLON_RESET => InterpCommand::Reset,
    COLON_HELP => InterpCommand::Help,
}

pub(crate) InterpItems: Vec<InterpItem> = {
    <pairs:(Expr FnDef)*> <last_e:Expr> => {
        let mut is = vec![];
        for (e, fn_def) in pairs {
            if e != Expr::default() {
                is.push(InterpItem::Expr(e));
            }
            is.push(InterpItem::FnDef(fn_def));
        }
        if last_e != Expr::default() {
            is.push(InterpItem::Expr(last_e));
        }
        is
    }
}

pub FnDef: FnDef = {
    LBRACE FN <sym:Symbol> EQ <e:Expr> RBRACE
        => FnDef(sym, e),
}

pub(crate) Symbol: Symbol = {
    IDENT => Symbol(interner.get_or_intern(<>))
}

pub(crate) SmallStepAssertion: (ValueStack, Expr, ValueStack, Expr) = {
    <ivs: ValueStack> <ie: Expr> LONG_RARROW <ovs: ValueStack> <oe: Expr> => {
        (ivs, ie, ovs, oe)
    }
}

pub(crate) BigStepAssertion: (ValueStack, Expr, ValueStack, Expr) = {
    <ivs: ValueStack> <ie: Expr> DDARROW <ovs: ValueStack> <oe: Expr> => {
        (ivs, ie, ovs, oe)
    }
}

pub ValueStack: ValueStack = {
    BRA <vs:Value*> KET => ValueStack(vs),
}

pub Value: Value = {
    IDENT => Value::Call(Symbol(interner.get_or_intern(<>))),
    LBRACKET <Expr> RBRACKET => Value::Quote(Box::new(<>)),
}

pub Expr: Expr = {
    <mut es:SingleExpr*> => {
        if es.len() == 1 {
            es.drain(..).next().unwrap()
        } else {
            Expr::Compose(es)
        }
    },
}

SingleExpr: Expr = {
    SWAP => Expr::Intrinsic(Intrinsic::Swap),
    CLONE => Expr::Intrinsic(Intrinsic::Clone),
    DROP => Expr::Intrinsic(Intrinsic::Drop),
    QUOTE => Expr::Intrinsic(Intrinsic::Quote),
    COMPOSE => Expr::Intrinsic(Intrinsic::Compose),
    APPLY => Expr::Intrinsic(Intrinsic::Apply),
    IDENT => Expr::Call(Symbol(interner.get_or_intern(<>))),
    LBRACKET <Expr> RBRACKET => Expr::Quote(Box::new(<>)),
    LPAREN <Expr> RPAREN,
}

match {
    r"\s*" => { }, // skip whitespace
    r"--[^\n\r]*[\n\r]*" => { }, // Skip `--` comments
    r"\(" => LPAREN,
    r"\)" => RPAREN,
    r"\[" => LBRACKET,
    r"\]" => RBRACKET,
    r"\{" => LBRACE,
    r"\}" => RBRACE,
    r"=" => EQ,
    r"⟨" => BRA,
    r"⟩" => KET,
    r"⟶" => LONG_RARROW,
    r"⇓" => DDARROW,
    r"swap" => SWAP,
    r"clone" => CLONE,
    r"drop" => DROP,
    r"quote" => QUOTE,
    r"compose" => COMPOSE,
    r"apply" => APPLY,
    r"fn" => FN,
    r":trace" => COLON_TRACE,
    r":show" => COLON_SHOW,
    r":list" => COLON_LIST,
    r":drop" => COLON_DROP,
    r":clear" => COLON_CLEAR,
    r":reset" => COLON_RESET,
    r":help" => COLON_HELP,
} else {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => IDENT,
}
